if (typeof _yuitest_coverage == "undefined"){
    _yuitest_coverage = {};
    _yuitest_coverline = function(src, line){
        var coverage = _yuitest_coverage[src];
        if (!coverage.lines[line]){
            coverage.calledLines++;
        }
        coverage.lines[line]++;
    };
    _yuitest_coverfunc = function(src, name, line){
        var coverage = _yuitest_coverage[src],
            funcId = name + ":" + line;
        if (!coverage.functions[funcId]){
            coverage.calledFunctions++;
        }
        coverage.functions[funcId]++;
    };
}
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"] = {
    lines: {},
    functions: {},
    coveredLines: 0,
    calledLines: 0,
    coveredFunctions: 0,
    calledFunctions: 0,
    path: "build/gallery-flyweight-tree/gallery-flyweight-tree.js",
    code: []
};
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"].code=["YUI.add('gallery-flyweight-tree', function (Y, NAME) {","","/**","* An implementation of the flyweight pattern for rendering tree-structured data.","*","* This module is made of two components, the manager and the nodes.","* The manager, FlyweightTreeManager, holds a definition of the tree in an internal, private object","* which is completely passive, with no methods, events or attributes.","* This is the internal tree configuration and the nodes of that tree are called iNodes","* for 'internal nodes'.","*","* When any action needs to be taken on any node, the manager takes a node instance","* (an instance of FlyweightTreeNode or, more often, a subclass of it)","* from the pool of instances, or creates one if none is available and slides it","* on top of the iNode holding its state and then performs the action as if","* the node instance had always been there.","*","* The manager is a subclass of Widget and contains the overall container for the tree.","* Nodes are a subclass of Base and they are rendered from markup resulting of","* processing its template with its attributes and several pre-defined placeholders.","*","* Nodes should not be instantiated directly but requested from the manager.","* Nodes are automatically generated by the manager in response to events.","* They are returned to the pool of nodes once the event listener return.","* The user should not hold references to nodes provided to event listeners","* or the callback of the tree traversal methods, since the manager will return","* them to the pool.  If the user needs to keep a reference, the `hold` method","* can be used to preserve it.","* On the other hand, for methods that do return a permanent reference or","* references marked as held, the user is responsible for calling `release`","* when no longer required so that the manager can return them to the pool.","*","* @module gallery-flyweight-tree","*/","'use strict';","/*jslint white: true */","var Lang = Y.Lang,","    YArray = Y.Array,","","    DOT = '.',","    HASH = '#',","    BYPASS_PROXY = \"_bypassProxy\",","    CBX = 'contentBox',","    VALUE = 'value',","    EXPANDED = 'expanded',","    DYNAMIC_LOADER = 'dynamicLoader',","    TABINDEX = 'tabIndex',","    FOCUSED = 'focusedNode',","","    DEFAULT_POOL = '_default',","","    getCName = Y.ClassNameManager.getClassName,","    FWNODE_NAME = 'flyweight-tree-node',","    cName = function (name) {","        return getCName(FWNODE_NAME, name);","    },","","    FWMgr,","    FWNode;","","/**"," * Widget to handle its child nodes by using the flyweight pattern."," *"," * The information for the tree is stored internally in a plain object without methods,"," * events or attributes."," * This manager will position FlyweightTreeNode instances (or subclasses of it)"," * over these iNodes from a small pool of them, in order to save memory."," *"," * The nodes on this configuration tree are referred to in this documentation as `iNodes`"," * for 'internal nodes', to tell them apart from the pooled FlyweightTreeNode instances"," * that will be used to manipulate them.  The FlyweightTreeNode instances will usually"," * be declared as `fwNodes` when confusion might arise."," * If a variable or argument is not explicitly named `iNode` or a related name it is"," * FlyweightTreeNode instance."," *"," * The developer should not be concerned about the iNodes,"," * except in the initial configuration tree."," * If the developer finds anything that needs to be done through iNodes,"," * it is a bug and should be reported (thanks)."," * iNodes should be private."," *"," * @class FlyweightTreeManager"," * @extends Widget"," * @constructor"," */","","FWMgr = Y.Base.create(","    NAME,","    Y.Widget,","    [],","    {","        /**","         * Clone of the configuration tree.","         * The FlyweightTreeNode instances will use the iNodes (internal nodes) in this tree as the storage for their state.","         * @property _tree","         * @type Object","         * @private","         */","        _tree: null,","        /**","         * Pool of FlyweightTreeNode instances to use and reuse by the manager.","         * It contains a hash of arrays indexed by the iNode (internal node) type.","         * Each array contains a series of FlyweightTreeNode subclasses of the corresponding type.","         * @property _pool","         * @type {Object}","         * @private","         */","        _pool: null,","        /**","         * List of dom events to be listened for at the outer container and fired again","         * at the FlyweightTreeNode level once positioned over the source iNode.","         *","         * Since the node instances are not actually there, they can't listen to the events themselves","         * so the events listed here will serve to wake up those instances and get the event","         * as if they had been there all along.","         * @property _domEvents","         * @type Array of strings","         * @protected","         * @default null","         */","        _domEvents: null,","        /**","         * Reference to the element that has the focus or should have the focus","         * when this widget is active (ie, tabbed into).","         * Mostly used for WAI-ARIA support.","         * @property _focusedINode","         * @type FlyweightTreeNode","         * @private","         * @default null","         */","        _focusedINode: null,","","        /**","         * Event handles of events subscribed to, to detach them on destroy","         * @property _eventHandles","         * @type Array of EventHandles","         * @private","         */","        _eventHandles: null,","","        /**","         * Part of the Widget lifecycle.","         * @method initializer","         * @protected","         */","        initializer:function () {","            this._pool = {};","            this._eventHandles = [];","        },","        /**","         * Part of the lifecycle.  Destroys the pools.","         * @method destructor","         * @protected","         */","        destructor: function () {","            var pool = this._pool;","            Y.Object.each(pool, function (value, key) {","                YArray.each(value, function (fwNode) {","                    fwNode.destroy();","                });","                delete pool[key];","            });","            this._pool = null;","            YArray.each(this._eventHandles, function (evHandle) {","                evHandle.detach();","            });","            this._eventHandles = null;","","        },","        /**","         * Method to load the configuration tree.","         * The nodes in this tree are copied into iNodes (internal nodes) for internal use.","         *","         * The initializer does not load the tree automatically so as to allow the subclass","         * of this manager","         * to process the tree definition anyway it wants, adding defaults and such","         * and to name the tree whatever is suitable.","         * For TreeView, the configuration property is named `tree`, for a form, it is named `form`.","         * It also sets initial values for some default properties such as `parent` references and `id` for all iNodes.","         * @method _loadConfig","         * @param tree {Array} Configuration for the first level of nodes.","         * Contains objects with the following attributes:","         * @param tree.label {String} Text or HTML markup to be shown in the node","         * @param [tree.expanded=true] {Boolean} Whether the children of this node should be visible.","         * @param [tree.children] {Array} Further definitions for the children of this node","         * @param [tree.type=FWTreeNode] {FWTreeNode | String} Class used to create instances for this iNode.","         * It can be a reference to an object or a name that can be resolved as `Y[name]`.","         * @param [tree.id=Y.guid()] {String} Identifier to assign to the DOM element containing the UI for this node.","         * @param [tree.template] {String} Template for this particular node.","         * @protected","         */","        _loadConfig: function (tree) {","            this._tree = {","                children: Y.clone(tree)","            };","            this._initNodes(this._tree);","","        },","        /** Initializes the iNodes configuration with default values and management info.","         * @method _initNodes","         * @param parentINode {Object} Parent of the iNodes to be set","         * @protected","         */","        _initNodes: function (parentINode) {","            var self = this;","            YArray.each(parentINode.children, function (iNode, i) {","                if (Lang.isString(iNode)) {","                    iNode = {label: iNode};","                    parentINode.children[i] = iNode;","                }","                if (!self._focusedINode) {","                    self._focusedINode = iNode;","                }","                iNode._parent = parentINode;","                iNode.id = iNode.id || Y.guid();","","                self._initNodes(iNode);","            });","        },","        /**","         * Widget lifecyle method.","         *","         * Gets the HTML markup for the visible nodes and inserts it into the contentbox.","         * @method renderUI","         * @protected","         */","        renderUI: function () {","            var root = this.getRoot();","            root._renderChildren(this.get(CBX));","            root.release();","        },","        /**","         * Initializes the events for its internal use and those requested in","         * the {{#crossLink \"_domEvents\"}}{{/crossLink}} array.","         * @method bindUI","         * @protected","         */","        bindUI: function() {","            var self = this;","","            self._eventHandles.push(self.after('focus', self._afterFocus));","            if (self._domEvents) {","                YArray.each(self._domEvents, function (event) {","                    self._eventHandles.push(self.after(event, self._afterDomEvent, self));","                });","            }","        },","        /**","         * Overrides the native `fire` method so that for DOM events,","         * it will fetch from the pool the fwNode that should have received","         * the event and add it to the event facade as property `node`.","         *","         * @method fire","         * @param type {String|Object} The type of the event, or an object that contains","         * a 'type' property.","         * @param arguments {Object*} an arbitrary set of parameters to pass to","         * the handler. If the first of these is an object literal and the event is","         * configured to emit an event facade, the event facade will replace that","         * parameter after the properties the object literal contains are copied to","         * the event facade.","         * @return {Boolean} false if the event was halted.","         */","        fire: function (type, ev) {","            var ret, self = this;","            if (ev && ev.domEvent) {","                ev.node = self._poolFetchFromEvent(ev);","                ret = FWMgr.superclass.fire.call(self, type, ev);","                if (ev.node) {","                    self._poolReturn(ev.node);","                }","                return ret;","            }","            return FWMgr.superclass.fire.apply(self, arguments);","        },","        /**","         * Expands all the nodes of the tree.","         *","         * It will only expand existing nodes.  If there is a {{#crossLink \"dynamicLoader:attribute\"}}{{/crossLink}} configured","         * it will not expand those since that might lead to extreme situations.","         * @method expandAll","         * @chainable","         */","        expandAll: function () {","            this.forSomeNodes(function(node) {","                node.set(EXPANDED, true);","            });","        },","        /**","         * Collapses all the nodes of the tree.","         *","         * @method collapseAll","         * @chainable","         */","        collapseAll: function () {","            this.forSomeNodes(function(node) {","                node.set(EXPANDED, false);","            });","        },","        /**","         * Finds a node by attribute value or by condition.","         * If the first argument is a string, it must be the name of an attribute","         * and the second argument the value sought.","         * If the first argument is a function, it should return true on finding","         * the node sought. The function will receive a node reference.","         * It returns the node sought or null.","         * The node is on hold and it must be released once used.","         * @method getNodeBy","         * @param attr {String or Function} Either an attribute name or a matching function","         * @param value {Any} if the first argument is a string, the second is the value to match","         * @return {FWNode or null} The node found or null","         */","        getNodeBy: function (attr, value) {","            var fn, found = null;","            switch (Lang.type(attr)) {","                case 'function':","                    fn = attr;","                    break;","                case 'string':","                    fn = function (node) {","                        return node.get(attr) === value;","                    };","                    break;","                default:","                    return null;","            }","            this.forSomeNodes(function (node) {","                if (fn(node)) {","                    found = node;","                    found.hold();","                    return true;","                }","                return false;","            });","            return found;","        },","","        /** Generic event listener for DOM events listed in the {{#crossLink \"_domEvents\"}}{{/crossLink}} array.","         *  It will locate the iNode represented by the UI elements that received the event,","         *  slide a suitable instance on it and fire the same event on that node.","         *  @method _afterEvent","         *  @param ev {EventFacade} Event facade as produced by the event","         *  @private","         */","        _afterDomEvent: function(ev) {","            var fwNode =  ev.node;","            if (fwNode) {","                fwNode.fire(ev.type.split(':')[1], {domEvent:ev.domEvent});","            }","        },","        /**","         * Returns a string identifying the type of the object to handle the iNode","         * or null if type was not a FlyweightNode instance.","         * @method _getTypeString","         * @param iNode {Object} Internal node in the tree configuration","         * @return {String} type of iNode.","         * @private","         */","        _getTypeString: function (iNode) {","            var type = iNode.type;","            if (!type) {","                return DEFAULT_POOL;","            }","            if (typeof type === 'string') {","                if (!Y[type]) {","                    throw new TypeError('Missing node class: Y.' + type );","                }","                type = Y[type];","            }","            type = type.NAME;","            if (!type) {","                throw new TypeError(\"Node contains unknown type\");","            }","            return type;","        },","        /**","         * Pulls from the pool an instance of the type declared in the given iNode","         * and slides it over that iNode.","         * If there are no instances of the given type in the pool, a new one will be created via {{#crossLink \"_createNode\"}}{{/crossLink}}","         * If an instance is held (see: {{#crossLink \"FlyweightTreeNode/hold\"}}{{/crossLink}}), it will be returned instead.","         * @method _poolFetch","         * @param iNode {Object} reference to a iNode within the configuration tree","         * @return {FlyweightTreeNode} Usually a subclass of FlyweightTreeNode positioned over the given iNode","         * @protected","         */","        _poolFetch: function(iNode) {","","            var pool,","                fwNode = iNode._nodeInstance,","                type = this._getTypeString(iNode);","","            if (!fwNode) {","                pool = this._pool[type];","                if (pool === undefined) {","                    pool = this._pool[type] = [];","                }","                if (pool.length) {","                    fwNode = pool.pop();","                    fwNode._slideTo(iNode);","                } else {","                    fwNode = this._createNode(iNode);","                }","            }","            iNode._refCount = (iNode._refCount || 0) + 1;","            return fwNode;","        },","        /**","         * Returns the FlyweightTreeNode instance to the pool.","         * Instances held (see: {{#crossLink \"FlyweightTreeNode/hold\"}}{{/crossLink}}) are never returned.","         * @method _poolReturn","         * @param fwNode {FlyweightTreeNode} Instance to return.","         * @protected","         */","        _poolReturn: function (fwNode) {","            var pool,","                iNode = fwNode._iNode,","                type = this._getTypeString(iNode);","","            iNode._refCount -= 1 ;","            if (iNode._refCount) {","                return;","            }","            fwNode._iNode = null;","            iNode._nodeInstance = null;","            pool = this._pool[type];","            if (pool) {","                pool.push(fwNode);","            }","        },","        /**","         * Returns a new instance of the type given in iNode or the","         * {{#crossLink \"defaultType\"}}{{/crossLink}} if none specified","         * and slides it on top of the iNode provided.","         * @method _createNode","         * @param iNode {Object} reference to a iNode within the configuration tree","         * @return {FlyweightTreeNode} Instance of the corresponding subclass of FlyweightTreeNode","         * @protected","         */","        _createNode: function (iNode) {","            var newNode,","                Type = iNode.type || this.get('defaultType');","            if (Lang.isString(Type)) {","                Type = Y[Type];","            }","            if (Type) {","                newNode = new Type({root:this});","                if (newNode instanceof Y.FlyweightTreeNode) {","                    // I need to do this otherwise Attribute will initialize","                    // the real iNode with default values when activating a lazyAdd attribute.","                    newNode._slideTo({});","                    YArray.each(Y.Object.keys(newNode._state.data), newNode._addLazyAttr, newNode);","                    // newNode.getAttrs();","                    // That's it (see above)","                    newNode._root =  this;","                    newNode._slideTo(iNode);","                    return newNode;","                }","            }","            return null;","        },","        /**","         * Returns an instance of Flyweight node positioned over the root.","         * The reference is placed on hold and should be released once used.","         * @method getRoot","         * @return {FlyweightTreeNode}","         */","        getRoot: function () {","            return this._poolFetch(this._tree).hold();","        },","        /**","         * Locates a iNode in the tree by the element that represents it.","         * @method _findINodeByElement","         * @param el {Node} Any element belonging to the tree","         * @return {Object} iNode that produced the markup for that element or null if not found","         * @protected","         */","        _findINodeByElement: function(el) {","            var id,","                found = null,","                scan = function (iNode) {","                    if (iNode.id === id) {","                        found = iNode;","                        return true;","                    }","                    if (iNode.children) {","                        return YArray.some(iNode.children, scan);","                    }","                    return false;","                };","            el = el.ancestor(DOT + FWNode.CNAMES.CNAME_NODE, true);","            if (el) {","                id = el.get('id');","","                if (scan(this._tree)) {","                    return found;","                }","            }","            return null;","        },","        /**","         * Returns a FlyweightTreeNode instance from the pool, positioned over the iNode whose markup generated some event.","         * @method _poolFetchFromEvent","         * @param ev {EventFacade}","         * @return {FlyweightTreeNode} The FlyweightTreeNode instance or null if not found.","         * @private","         */","        _poolFetchFromEvent: function (ev) {","            var found = this._findINodeByElement(ev.domEvent.target);","            if (found) {","                return this._poolFetch(found);","            }","            return null;","        },","        /**","         * Traverses the whole configuration tree, calling a given function for each iNode.","         * If the function returns true, the traversing will terminate.","         * @method _forSomeINode","         * @param fn {Function} Function to call on each configuration iNode","         *        @param fn.iNode {Object} iNode in the configuration tree","         *        @param fn.depth {Integer} depth of this iNode within the tree","         *        @param fn.index {Integer} index of this iNode within the array of its siblings","         * @param scope {Object} scope to run the function in, defaults to `this`.","         * @return true if any of the function calls returned true (the traversal was terminated earlier)","         * @protected","         */","        _forSomeINode: function(fn, scope) {","            scope = scope || this;","            var loop = function(iNode, depth) {","                return YArray.some(iNode.children || [], function(childINode, index) {","                    if (fn.call(scope, childINode,depth, index)) {","                        return true;","                    }","                    return loop(childINode,depth + 1);","                });","            };","            return loop(this._tree, 0);","        },","        /**","         * Executes the given function over all the nodes in the tree or until the function returns true.","         * If dynamic loading is enabled, it will not run over nodes not yet loaded.","         * @method forSomeNodes","         * @param fn {function} function to execute on each node.  It will receive:","         *    @param fn.node {FlyweightTreeNode} node being visited.","         *    @param fn.depth {Integer} depth from the root. The root node is level zero and it is not traversed.","         *    @param fn.index {Integer} position of this node within its branch","         * @param scope {Object} Scope to run the function in.  Defaults to the FlyweightTreeManager instance.","         * @return {Boolean} true if any function calls returned true (the traversal was interrupted)","         */","        forSomeNodes: function (fn, scope) {","            scope = scope || this;","","            var root = this.getRoot(),","                forOneLevel = function (fwNode, depth) {","                    fwNode.forSomeChildren(function (fwNode, index, array) {","                        if (fn.call(scope, fwNode, depth, index, array) === true) {","                            return true;","                        }","                        return forOneLevel(fwNode, depth + 1);","                    });","                },","                ret = forOneLevel(root, 0);","            root.release();","            return ret;","        },","        /**","         * Getter for the {{#crossLink \"focusedNode:attribute\"}}{{/crossLink}} attribute","         * @method _focusedNodeGetter","         * @return {FlyweightNode} Node that would have the focus if the widget is focused","         * @private","         */","        _focusedNodeGetter: function () {","            return this._poolFetch(this._focusedINode).hold();","        },","        /**","         * Setter for the {{#crossLink \"focusedNode:attribute\"}}{{/crossLink}} attribute","         * @method _focusedNodeSetter","         * @param value {FlyweightNode} Node to receive the focus.","         * @return {Object} iNode matching the focused node.","         * @private","         */","        _focusedNodeSetter: function (value) {","            if (!value || value instanceof Y.FlyweightTreeNode) {","                var newINode = (value?value._iNode:this._tree.children[0]);","                this._focusOnINode(newINode);","                return newINode;","            } else {","                return Y.Attribute.INVALID_VALUE;","            }","        },","        /**","         * Sets the focus on the given iNode","         * @method _focusOnINode","         * @param iNode {Object} iNode to receive the focus","         * @private","         */","        _focusOnINode: function (iNode) {","            var prevINode = this._focusedINode,","                el,","                self = this,","                expand = function (iNode) {","                    iNode = iNode._parent;","                    if (iNode && iNode._parent) {","                        expand(iNode);","                        self._poolReturn(self._poolFetch(iNode).set(EXPANDED, true));","                    }","                };","","            if (iNode && iNode !== prevINode) {","","                el = Y.one(HASH + prevINode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);","                el.blur();","                el.set(TABINDEX, -1);","","                expand(iNode);","","                el = Y.one(HASH + iNode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);","                el.focus();","                el.set(TABINDEX,0);","","                self._focusedINode = iNode;","","            }","","        },","        /**","         * Setter for the {{#crossLink \"dynamicLoader:attribute\"}}{{/crossLink}} attribute.","         * It changes the expanded attribute to false on childless iNodes not marked with `isLeaf","         * since they can now be expanded.","         * @method","         * @param value {Function | null } Function to handle the loading of nodes on demand","         * @return {Function | null | INVALID_VALUE} function set or rejection","         * @private","         */","        _dynamicLoaderSetter: function (value) {","            if (!Lang.isFunction(value) &&  value !== null) {","                return Y.Attribute.INVALID_VALUE;","            }","            return value;","        }","    },","    {","        ATTRS: {","            /**","             * Default object type of the nodes if no explicit type is given in the configuration tree.","             * It can be specified as an object reference, these two are equivalent: `Y.FWTreeNode` or  `'FWTreeNode'`.","             *","             * @attribute defaultType","             * @type {String | Object}","             * @default 'FlyweightTreeNode'","             */","            defaultType: {","                value: 'FlyweightTreeNode'","            },","            /**","             * Function used to load the nodes dynamically.","             * Function will run in the scope of the FlyweightTreeManager instance and will","             * receive:","             *","             * * node {FlyweightTreeNode} reference to the parent of the children to be loaded.","             * * callback {Function} function to call with the configuration info for the children.","             *","             * The function shall fetch the nodes and create a configuration object","             * much like the one a whole tree might receive.","             * It is not limited to just one level of nodes, it might contain children elements as well.","             * When the data is processed, it should call the callback with the configuration object.","             * The function is responsible of handling any errors.","             * If the the callback is called with no arguments, the parent node will be marked as having no children.","             *","             * This attribute should be set before the tree is rendered as childless nodes","             * render differently when there is a dynamic loader than when there isn't.","             * (childless nodes can be expanded when a dynamic loader is present and the UI should reflect that).","             * @attribute dynamicLoader","             * @type {Function or null}","             * @default null","             */","            dynamicLoader: {","                value: null,","                setter: '_dynamicLoaderSetter'","            },","            /**","             * Points to the node that currently has the focus.","             * If read, the node returned is placed on hold.","             * Please make sure to release the node instance to the pool when done.","             * @attribute focusedNode","             * @type FlyweightTreeNode","             * @default First node in the tree","             */","            focusedNode: {","                getter: '_focusedNodeGetter',","                setter: '_focusedNodeSetter'","                // There is no need for validator since the setter already takes care of validation.","            }","","        }","    });","","","Y.FlyweightTreeManager = FWMgr;","","","/**","* An implementation of the flyweight pattern.  This class should not be instantiated directly.","* Instances of this class can be requested from the flyweight manager class","*","* The FlyweightTreeManager will create instances of this class as required and","* pool them when not in use.","* The instances can be slid on top of the nodes (iNodes, for internal nodes)","* in literal object containing the definition","* of a tree and will take its state from the `iNode` it is slid upon.","* It relies for most of its functionality on the flyweight manager object,","* which contains most of the code.","* @class FlyweightTreeNode","* @extends Base","* @constructor  Do not instantiate directly.","*/","FWNode = Y.Base.create(","    FWNODE_NAME,","    Y.Base,","    [],","    {","        /**","         * Reference to the iNode in the configuration tree it has been slid over.","         * @property _iNode","         * @type {Object}","         * @private","         **/","        _iNode:null,","        /**","         * Reference to the FlyweightTreeManager instance this node belongs to.","         * It is set by the root and should be considered read-only.","         * @property _root","         * @type FlyweightTreeManager","         * @private","         */","        _root: null,","        /**","         * Standard lifecycle method, reads the root node from the config","         * @method initializer","         * @param cfg {object} configuration data","         * @protected","         */","        initializer: function (cfg) {","            this._root = cfg.root;","            this.after('expandedChange', this._afterExpandedChange);","            this.after('labelChange', this._afterLabelChange);","            // This is a patch because the _buildCfg does not work","            this._buildCfgPatch();","        },","        /**","         * Patch to work around the issue with the static _buildCfg property of Base","         * that doesn't quite work.","         * @method _buildCfgPatch","         * @private","         */","        _buildCfgPatch: function () {","            var cnames = {}, it, ot, constr = this.constructor;","            YArray.each(this._classes, function (c) {","                Y.mix(cnames, c.CNAMES);","                it = it || c.INNER_TEMPLATE;","                ot = ot || c.OUTER_TEMPLATE;","            });","            constr.CNAMES = cnames;","            constr.INNER_TEMPLATE = it;","            constr.OUTER_TEMPLATE = ot;","        },","        /**","         * Returns a string with the markup for this node along that of its children","         * produced from its attributes rendered","         * via the first template string it finds in these locations:","         *","         * * It's own {{#crossLink \"template\"}}{{/crossLink}} configuration attribute","         * * The static {{#crossLink \"FlyweightTreeNode/TEMPLATE\"}}{{/crossLink}} class property","         *","         * @method _getHTML","         * @param index {Integer} index of this node within the array of siblings","         * @param nSiblings {Integer} number of siblings including this node","         * @param depth {Integer} number of levels to the root","         * @return {String} markup generated by this node","         * @protected","         */","        _getHTML: function(index, nSiblings, depth) {","            // assumes that if you asked for the HTML it is because you are rendering it","            var root = this._root,","                iNode = this._iNode,","                attrs = this.getAttrs(),","                s = '',","                childCount = iNode.children && iNode.children.length,","                CNAMES = this.constructor.CNAMES,","                nodeClasses = [CNAMES.CNAME_NODE],","                templ,","                it = iNode.inner_template || this.constructor.INNER_TEMPLATE,","                ot = iNode.outer_template || this.constructor.OUTER_TEMPLATE;","","            templ = ot.replace('{INNER_TEMPLATE}', it);","            Y.mix(attrs, CNAMES);","            iNode._rendered = true;","            if (childCount) {","                if (attrs[EXPANDED]) {","                    iNode._childrenRendered = true;","                    this.forSomeChildren( function (fwNode, index, array) {","                        s += fwNode._getHTML(index, array.length, depth + 1);","                    });","                    nodeClasses.push(CNAMES.CNAME_EXPANDED);","                } else {","                    nodeClasses.push(CNAMES.CNAME_COLLAPSED);","                }","            } else {","                if (this._root.get(DYNAMIC_LOADER) && !iNode.isLeaf) {","                    nodeClasses.push(CNAMES.CNAME_COLLAPSED);","                } else {","                    nodeClasses.push(CNAMES.CNAME_NOCHILDREN);","                }","            }","            if (index === 0) {","                nodeClasses.push(CNAMES.CNAME_FIRSTCHILD);","            }","            if (index === nSiblings - 1) {","                nodeClasses.push(CNAMES.CNAME_LASTCHILD);","            }","            if (iNode.type) {","                nodeClasses.push(CNAMES.CNAME_TYPE_PREFIX + root._getTypeString(iNode));","            }","            attrs.children = s;","            attrs.CNAME_NODE = nodeClasses.join(' ');","            attrs.tabIndex = (iNode === root._focusedINode)?0:-1;","","            return Lang.sub(templ, attrs);","","        },","        /**","         * Method to slide this instance on top of another iNode in the configuration object","         * @method _slideTo","         * @param iNode {Object} iNode in the underlying configuration tree to slide this object on top of.","         * @private","         */","        _slideTo: function (iNode) {","            iNode._nodeInstance = this;","            this._iNode = iNode;","            this._stateProxy = iNode;","        },","        /**","         * Whether this node has children.","         * If there are children, it actually returns the number of children,","         * otherwise it might return 0 or undefined.","         * @method hasChildren","         * @return {Boolean} true if the node has children","         */","        hasChildren: function () {","            var children = this._iNode.children;","            return !!(children && children.length);","        },","        /**","         * Executes the given function on each of the child nodes of this node.","         * @method forSomeChildren","         * @param fn {Function} Function to be executed on each node","         *        @param fn.child {FlyweightTreeNode} Instance of a suitable subclass of FlyweightTreeNode,","         *        positioned on top of the child node","         *        @param fn.index {Integer} Index of this child within the array of children","         * @param scope {object} The falue of this for the function.  Defaults to the parent.","        **/","        forSomeChildren: function(fn, scope) {","            var root = this._root,","                children = this._iNode.children,","                child, ret;","            scope = scope || this;","            if (children && children.length) {","                YArray.some(children, function (iNode, index, array) {","                    child = root._poolFetch(iNode);","                    ret = fn.call(scope, child, index, array);","                    root._poolReturn(child);","                    return ret;","                });","            }","        },","        /**","         * Responds to the change in the {{#crossLink \"label:attribute\"}}{{/crossLink}} attribute.","         * @method _afterLabelChange","         * @param ev {EventFacade} standard attribute change event facade","         * @private","         */","        _afterLabelChange: function (ev) {","            var el = Y.one(HASH + this._iNode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);","            if (el) {","                el.setHTML(ev.newVal);","            }","        },","        /**","         * Getter for the expanded configuration attribute.","         * It is meant to be overriden by the developer.","         * The supplied version defaults to true if the expanded property","         * is not set in the underlying configuration tree.","         * It can be overriden to default to false.","         * @method _expandedGetter","         * @return {Boolean} The expanded state of the node.","         * @protected","         */","        _expandedGetter: function (value) {","            var iNode = this._iNode;","            if (!!this._root.get(DYNAMIC_LOADER) && !iNode.children) {","                return !!iNode.isLeaf;","            } else {","                return (value === undefined) || !!value;","            }","        },","        /**","         * Responds to the change in the {{#crossLink \"expanded:attribute\"}}{{/crossLink}} attribute.","         * It renders the child nodes if this branch has never been expanded.","         * Then sets the className on the node to the static constants","         * CNAME\\_COLLAPSED or CNAME\\_EXPANDED from Y.FlyweightTreeManager","         * @method _afterExpandedChange","         * @param ev {EventFacade} standard attribute change event facade","         * @private","         */","        _afterExpandedChange: function (ev) {","            var value = !!ev.newVal,","                self = this,","                iNode = self._iNode,","                root = self._root,","                el = Y.one(HASH + iNode.id),","                dynLoader = root.get(DYNAMIC_LOADER),","                CEXP = FWNode.CNAMES.CNAME_EXPANDED,","                CCOLL = FWNode.CNAMES.CNAME_COLLAPSED;","","            if (dynLoader && !iNode.isLeaf && (!iNode.children  || !iNode.children.length)) {","                this._loadDynamic();","                return;","            }","            if (el) {","                if (iNode.children && iNode.children.length) {","                    if (value) {","                        if (!iNode._childrenRendered) {","                            self._renderChildren();","                        }","                        el.replaceClass(CCOLL, CEXP);","                    } else {","                        el.replaceClass(CEXP, CCOLL);","                    }","                }","                el.set('aria-expanded', String(value));","            }","        },","        /**","         * Triggers the dynamic loading of children for this node.","         * @method _loadDynamic","         * @private","         */","        _loadDynamic: function () {","            var self = this,","                root = self._root;","            Y.one(HASH + this.get('id')).replaceClass(FWNode.CNAMES.CNAME_COLLAPSED, FWNode.CNAMES.CNAME_LOADING);","            root.get(DYNAMIC_LOADER).call(root, self, Y.bind(self._dynamicLoadReturn, self));","","        },","        /**","         * Callback for the dynamicLoader method.","         * @method _dynamicLoadReturn","         * @param response {Array} array of child iNodes","         * @private","         */","        _dynamicLoadReturn: function (response) {","            var self = this,","                iNode = self._iNode,","                root = self._root,","                CNAMES = FWNode.CNAMES;","","            if (response) {","","                iNode.children = response;","                root._initNodes(iNode);","                self._renderChildren();","            } else {","                iNode.isLeaf = true;","            }","            // isLeaf might have been set in the response, not just in the line above.","            Y.one(HASH + iNode.id).replaceClass(CNAMES.CNAME_LOADING, (iNode.isLeaf?CNAMES.CNAME_NOCHILDREN:CNAMES.CNAME_EXPANDED));","        },","        /**","         * Renders the children of this node.","         * It the children had been rendered, they will be replaced.","         * @method _renderChildren","         * @param el {Node} Container to render the children into.","         * Used only for rendering of the root when it will be the contentBox.","         * @private","         */","        _renderChildren: function (el) {","            var s = '',","                iNode = this._iNode,","                depth = this.get('depth');","            iNode._childrenRendered = true;","            this.forSomeChildren(function (fwNode, index, array) {","                s += fwNode._getHTML(index, array.length, depth + 1);","            });","            el = el || Y.one(HASH + iNode.id + ' .' + FWNode.CNAMES.CNAME_CHILDREN);","            el.setHTML(s);","        },","        /**","         * Prevents this instance from being returned to the pool and reused.","         * Remember to {{#crossLink \"release\"}}{{/crossLink}} this instance when no longer needed.","         * @method hold","         * @chainable","         */","        hold: function () {","            var self = this,","                iNode = self._iNode;","","            iNode._refCount += 1;","            return self;","        },","        /**","         * Allows this instance to be returned to the pool and reused.","         *","         * __Important__: This instance should not be used after being released","         * @method release","         * @chainable","         */","        release: function () {","            var self = this;","            self._root._poolReturn(self);","            return self;","        },","        /**","         * Returns the parent node for this node or null if none exists.","         * The copy is on {{#crossLink \"hold\"}}{{/crossLink}}.","         * Remember to {{#crossLink \"release\"}}{{/crossLink}} the copy to the pool when done.","         * @method getParent","         * @return FlyweightTreeNode","         */","        getParent: function() {","            var iNode = this._iNode._parent;","            return (iNode?this._root._poolFetch(iNode).hold():null);","        },","        /**","         * Returns the next sibling node for this node or null if none exists.","         * The copy is on {{#crossLink \"hold\"}}{{/crossLink}}.","         * Remember to {{#crossLink \"release\"}}{{/crossLink}} the copy to the pool when done.","         * @method getNextSibling","         * @return FlyweightTreeNode","         */","        getNextSibling: function() {","            var parent = this._iNode._parent,","                siblings = (parent && parent.children),","                index = siblings.indexOf(this._iNode) + 1;","            if (index === 0 || index >= siblings.length) {","                return null;","            }","            return this._root._poolFetch(siblings[index]).hold();","        },","        /**","         * Returns the previous sibling node for this node or null if none exists.","         * The copy is on {{#crossLink \"hold\"}}{{/crossLink}}.","         * Remember to {{#crossLink \"release\"}}{{/crossLink}} the copy to the pool when done.","         * @method getPreviousSibling","         * @return FlyweightTreeNode","         */","        getPreviousSibling: function() {","            var parent = this._iNode._parent,","                siblings = (parent && parent.children),","                index = siblings.indexOf(this._iNode) - 1;","            if (index < 0) {","                return null;","            }","            return this._root._poolFetch(siblings[index]).hold();","        },","        /**","         * Sets the focus to this node.","         * @method focus","         * @chainable","         */","        focus: function() {","            return this._root.set(FOCUSED, this);","        },","        /**","         * Removes the focus from this node","         * @method blur","         * @chainable","         */","        blur: function () {","            return this._root.set(FOCUSED, null);","        },","        /**","         * Sugar method to toggle the expanded state of the node.","         * @method toggle","         * @chainable","         */","        toggle: function() {","            return this.set(EXPANDED, !this.get(EXPANDED));","        },","        /**","         * Sugar method to expand a node","         * @method expand","         * @chainable","         */","        expand: function() {","            return this.set(EXPANDED, true);","        },","        /**","         * Sugar method to collapse this node","         * @method collapse","         * @chainable","         */","        collapse: function() {","            return this.set(EXPANDED, false);","        },","        /**","         * Returns true if this node is the root node","         * @method isRoot","         * @return {Boolean} true if root node","         */","        isRoot: function() {","            return this._root._tree === this._iNode;","        },","","        /**","        * Sets the stored value for the attribute, in either the","        * internal state object, or the state proxy if it exits","        *","        * @method _setStateVal","        * @private","        * @param {String} name The name of the attribute","        * @param {Any} value The value of the attribute","        */","        _setStateVal : function(name, value) {","            var iNode = this._iNode;","            if (this._state.get(name, BYPASS_PROXY) || this._state.get(name, 'initializing') || !iNode) {","                this._state.add(name, VALUE, value);","            } else {","                iNode[name] = value;","            }","        }","    },","    {","        /**","         * Outer template string to be used to render this node.","         * It may be overriden by the subclass.","         *","         * It contains the HTML markup for the wrapper for the node plus placeholders,","         * enclosed in curly braces, that have access to any of the","         * configuration attributes of this node plus several predefined placeholders.","         *","         * It must contain at least three elements identified by their CSS classNames","         * and a special placeholder:","","         +----------------------------+","         | {CNAME_NODE}               |","         | +------------------------+ |","         | | {INNER_TEMPLATE}        | |","         | +------------------------+ |","         |                            |","         | +------------------------+ |","         | | {CNAME_CHILDREN}       | |","         | +------------------------+ |","         +----------------------------+","","         * For example:","","        OUTER_TEMPLATE:'<div id=\"{id}\" class=\"{CNAME_NODE}\" role=\"\" aria-expanded=\"{expanded}\">{INNER_TEMPLATE}' +","                            '<div class=\"{CNAME_CHILDREN}\" role=\"group\">{children}</div></div>',","","         * The outermost container identified by the className `{CNAME_NODE}`","         * must also use the `{id}` placeholder to set the `id` of the node.","         * It should also have the proper ARIA role assigned and the","         * `aria-expanded` set to the `{expanded}` placeholder.","         *","         * It must contain two further elements:","         *","         * * A placeholder for the INNER_TEMPLATE of this node, identified by the placeholder","         *   `{INNER_TEMPLATE}` which should contain everything the user would associate","         *   with this node, such as the label and other status indicators","         *   such as toggle and selection indicators.","         *","         * * The other element is the container for the children of this node.","         *   It will be identified by the className `{CNAME_CHILDREN}` and it","         *   should enclose the placeholder `{children}`.","         *","         * @property OUTER_TEMPLATE","         * @type {String}","         * @default '<div id=\"{id}\" class=\"{CNAME_NODE}\" role=\"\" aria-expanded=\"{expanded}\"><div tabIndex=\"{tabIndex}\"","         class=\"{CNAME_CONTENT}\">{label}</div><div class=\"{CNAME_CHILDREN}\" role=\"group\">{children}</div></div>'","         * @static","         */","        OUTER_TEMPLATE:'<div id=\"{id}\" class=\"{CNAME_NODE}\" role=\"\" aria-expanded=\"{expanded}\">{INNER_TEMPLATE}' +","                            '<div class=\"{CNAME_CHILDREN}\" role=\"group\">{children}</div></div>',","        /**","         * The template for what the user will see of the node.","         * It has been broken appart from the outer template because","         * this is the part that the developer is most likely to modify","         * so that there is no need to repeat the outer envelope over and over again.","         * For example:","         *","            INNER_TEMPLATE:'<div tabIndex=\"{tabIndex}\" class=\"{CNAME_CONTENT}\">{label}</div>',","","         * This element must have at least a palceholder for the `{label}` attribute","         * and any other visual clues to the user.  It must also have the CSS className","         * `{CNAME_CONTENT}` which will be replaced by a suitable name at execution","         * and that will help to locate the contents of this node.","         *","         * This is the element that would receive the focus of the node, thus,","         * it must have a `{tabIndex}` placeholder to receive the appropriate","         * value for the `tabIndex` attribute.","         * @property INNER_TEMPLATE","         * @type {String}","         * @default '<div tabIndex=\"{tabIndex}\" class=\"{CNAME_CONTENT}\">{label}</div>'","         * @static","         */","        INNER_TEMPLATE:'<div tabIndex=\"{tabIndex}\" class=\"{CNAME_CONTENT}\">{label}</div>',","        /**","         * Collection of CSS class names used in the template.","         * It is written all uppercase because its contents are meant to be constants,","         * this object itself being augmented by class names added by its subclasses","         * @attribute CNAMES","         * @type Object","         * @static","         */","        CNAMES: {","            CNAME_NODE: getCName(FWNODE_NAME),","            CNAME_CONTENT: cName('content'),","            CNAME_CHILDREN: cName('children'),","            CNAME_COLLAPSED: cName('collapsed'),","            CNAME_EXPANDED: cName(EXPANDED),","            CNAME_NOCHILDREN: cName('no-children'),","            CNAME_FIRSTCHILD: cName('first-child'),","            CNAME_LASTCHILD: cName('last-child'),","            CNAME_LOADING: cName('loading'),","            CNAME_TYPE_PREFIX: cName('type-')","/*        },","        _buildCfg: {","            // aggregates: ['CNAMES']",""," */       },","        ATTRS: {","            /**","             * Reference to the FlyweightTreeManager this node belongs to","             * @attribute root","             * @type {FlyweightTreeManager}","             * @readOnly","             *","             */","","            root: {","                _bypassProxy: true,","                readOnly: true,","                getter: function() {","                    return this._root;","                }","            },","","            /**","             * Template to use on this particular instance.","             * The renderer will default to the static TEMPLATE property of this class","             * (the preferred way) or the nodeTemplate configuration attribute of the root.","             * See the TEMPLATE static property.","             * @attribute template","             * @type {String}","             * @default undefined","             */","            template: {","                validator: Lang.isString","            },","            /**","             * Label for this node. Nodes usually have some textual content, this is the place for it.","             * @attribute label","             * @type {String}","             * @default ''","             */","            label: {","                setter:String,","                value: ''","            },","            /**","             * Id to assign to the DOM element that contains this node.","             * Once rendered, it cannot be changed.","             * If none was supplied, it will generate one.","             * @attribute id","             * @type {Identifier}","             * @default guid()","             */","            id: {","                validator: function () {","                    return !this._root.get('rendered');","                }","            },","            /**","             * Returns the depth of this node from the root.","             * This is calculated on-the-fly.","             * @attribute depth","             * @type Integer","             * @readOnly","             */","            depth: {","                _bypassProxy: true,","                readOnly: true,","                getter: function () {","                    var count = 0,","                        iNode = this._iNode;","                    while (iNode._parent) {","                        count += 1;","                        iNode = iNode._parent;","                    }","                    return count-1;","                }","            },","            /**","             * Expanded state of this node.","             * @attribute expanded","             * @type Boolean","             * @default true","             */","            expanded: {","                getter: '_expandedGetter'","            }","        }","    }",");","Y.FlyweightTreeNode = FWNode;","","","","}, '@VERSION@', {\"requires\": [\"widget\", \"base-build\"], \"skinnable\": false});"];
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"].lines = {"1":0,"35":0,"37":0,"55":0,"87":0,"147":0,"148":0,"156":0,"157":0,"158":0,"159":0,"161":0,"163":0,"164":0,"165":0,"167":0,"193":0,"196":0,"205":0,"206":0,"207":0,"208":0,"209":0,"211":0,"212":0,"214":0,"215":0,"217":0,"228":0,"229":0,"230":0,"239":0,"241":0,"242":0,"243":0,"244":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"271":0,"273":0,"284":0,"285":0,"295":0,"296":0,"313":0,"314":0,"316":0,"317":0,"319":0,"320":0,"322":0,"324":0,"326":0,"327":0,"328":0,"329":0,"330":0,"332":0,"334":0,"345":0,"346":0,"347":0,"359":0,"360":0,"361":0,"363":0,"364":0,"365":0,"367":0,"369":0,"370":0,"371":0,"373":0,"387":0,"391":0,"392":0,"393":0,"394":0,"396":0,"397":0,"398":0,"400":0,"403":0,"404":0,"414":0,"418":0,"419":0,"420":0,"422":0,"423":0,"424":0,"425":0,"426":0,"439":0,"441":0,"442":0,"444":0,"445":0,"446":0,"449":0,"450":0,"453":0,"454":0,"455":0,"458":0,"467":0,"477":0,"480":0,"481":0,"482":0,"484":0,"485":0,"487":0,"489":0,"490":0,"491":0,"493":0,"494":0,"497":0,"507":0,"508":0,"509":0,"511":0,"526":0,"527":0,"528":0,"529":0,"530":0,"532":0,"535":0,"549":0,"551":0,"553":0,"554":0,"555":0,"557":0,"561":0,"562":0,"571":0,"581":0,"582":0,"583":0,"584":0,"586":0,"596":0,"600":0,"601":0,"602":0,"603":0,"607":0,"609":0,"610":0,"611":0,"613":0,"615":0,"616":0,"617":0,"619":0,"634":0,"635":0,"637":0,"697":0,"715":0,"742":0,"743":0,"744":0,"746":0,"755":0,"756":0,"757":0,"758":0,"759":0,"761":0,"762":0,"763":0,"782":0,"793":0,"794":0,"795":0,"796":0,"797":0,"798":0,"799":0,"800":0,"802":0,"804":0,"807":0,"808":0,"810":0,"813":0,"814":0,"816":0,"817":0,"819":0,"820":0,"822":0,"823":0,"824":0,"826":0,"836":0,"837":0,"838":0,"848":0,"849":0,"861":0,"864":0,"865":0,"866":0,"867":0,"868":0,"869":0,"870":0,"881":0,"882":0,"883":0,"897":0,"898":0,"899":0,"901":0,"914":0,"923":0,"924":0,"925":0,"927":0,"928":0,"929":0,"930":0,"931":0,"933":0,"935":0,"938":0,"947":0,"949":0,"950":0,"960":0,"965":0,"967":0,"968":0,"969":0,"971":0,"974":0,"985":0,"988":0,"989":0,"990":0,"992":0,"993":0,"1002":0,"1005":0,"1006":0,"1016":0,"1017":0,"1018":0,"1028":0,"1029":0,"1039":0,"1042":0,"1043":0,"1045":0,"1055":0,"1058":0,"1059":0,"1061":0,"1069":0,"1077":0,"1085":0,"1093":0,"1101":0,"1109":0,"1122":0,"1123":0,"1124":0,"1126":0,"1242":0,"1278":0,"1292":0,"1294":0,"1295":0,"1296":0,"1298":0,"1313":0};
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"].functions = {"cName:54":0,"initializer:146":0,"(anonymous 3):158":0,"(anonymous 2):157":0,"(anonymous 4):164":0,"destructor:155":0,"_loadConfig:192":0,"(anonymous 5):206":0,"_initNodes:204":0,"renderUI:227":0,"(anonymous 6):243":0,"bindUI:238":0,"fire:263":0,"(anonymous 7):284":0,"expandAll:283":0,"(anonymous 8):295":0,"collapseAll:294":0,"fn:319":0,"(anonymous 9):326":0,"getNodeBy:312":0,"_afterDomEvent:344":0,"_getTypeString:358":0,"_poolFetch:385":0,"_poolReturn:413":0,"_createNode:438":0,"getRoot:466":0,"scan:479":0,"_findINodeByElement:476":0,"_poolFetchFromEvent:506":0,"(anonymous 10):528":0,"loop:527":0,"_forSomeINode:525":0,"(anonymous 11):553":0,"forOneLevel:552":0,"forSomeNodes:548":0,"_focusedNodeGetter:570":0,"_focusedNodeSetter:580":0,"expand:599":0,"_focusOnINode:595":0,"_dynamicLoaderSetter:633":0,"initializer:741":0,"(anonymous 12):756":0,"_buildCfgPatch:754":0,"(anonymous 13):799":0,"_getHTML:780":0,"_slideTo:835":0,"hasChildren:847":0,"(anonymous 14):866":0,"forSomeChildren:860":0,"_afterLabelChange:880":0,"_expandedGetter:896":0,"_afterExpandedChange:913":0,"_loadDynamic:946":0,"_dynamicLoadReturn:959":0,"(anonymous 15):989":0,"_renderChildren:984":0,"hold:1001":0,"release:1015":0,"getParent:1027":0,"getNextSibling:1038":0,"getPreviousSibling:1054":0,"focus:1068":0,"blur:1076":0,"toggle:1084":0,"expand:1092":0,"collapse:1100":0,"isRoot:1108":0,"_setStateVal:1121":0,"getter:1241":0,"validator:1277":0,"getter:1291":0,"(anonymous 1):1":0};
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"].coveredLines = 285;
_yuitest_coverage["build/gallery-flyweight-tree/gallery-flyweight-tree.js"].coveredFunctions = 72;
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1);
YUI.add('gallery-flyweight-tree', function (Y, NAME) {

/**
* An implementation of the flyweight pattern for rendering tree-structured data.
*
* This module is made of two components, the manager and the nodes.
* The manager, FlyweightTreeManager, holds a definition of the tree in an internal, private object
* which is completely passive, with no methods, events or attributes.
* This is the internal tree configuration and the nodes of that tree are called iNodes
* for 'internal nodes'.
*
* When any action needs to be taken on any node, the manager takes a node instance
* (an instance of FlyweightTreeNode or, more often, a subclass of it)
* from the pool of instances, or creates one if none is available and slides it
* on top of the iNode holding its state and then performs the action as if
* the node instance had always been there.
*
* The manager is a subclass of Widget and contains the overall container for the tree.
* Nodes are a subclass of Base and they are rendered from markup resulting of
* processing its template with its attributes and several pre-defined placeholders.
*
* Nodes should not be instantiated directly but requested from the manager.
* Nodes are automatically generated by the manager in response to events.
* They are returned to the pool of nodes once the event listener return.
* The user should not hold references to nodes provided to event listeners
* or the callback of the tree traversal methods, since the manager will return
* them to the pool.  If the user needs to keep a reference, the `hold` method
* can be used to preserve it.
* On the other hand, for methods that do return a permanent reference or
* references marked as held, the user is responsible for calling `release`
* when no longer required so that the manager can return them to the pool.
*
* @module gallery-flyweight-tree
*/
_yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 1)", 1);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 35);
'use strict';
/*jslint white: true */
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 37);
var Lang = Y.Lang,
    YArray = Y.Array,

    DOT = '.',
    HASH = '#',
    BYPASS_PROXY = "_bypassProxy",
    CBX = 'contentBox',
    VALUE = 'value',
    EXPANDED = 'expanded',
    DYNAMIC_LOADER = 'dynamicLoader',
    TABINDEX = 'tabIndex',
    FOCUSED = 'focusedNode',

    DEFAULT_POOL = '_default',

    getCName = Y.ClassNameManager.getClassName,
    FWNODE_NAME = 'flyweight-tree-node',
    cName = function (name) {
        _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "cName", 54);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 55);
return getCName(FWNODE_NAME, name);
    },

    FWMgr,
    FWNode;

/**
 * Widget to handle its child nodes by using the flyweight pattern.
 *
 * The information for the tree is stored internally in a plain object without methods,
 * events or attributes.
 * This manager will position FlyweightTreeNode instances (or subclasses of it)
 * over these iNodes from a small pool of them, in order to save memory.
 *
 * The nodes on this configuration tree are referred to in this documentation as `iNodes`
 * for 'internal nodes', to tell them apart from the pooled FlyweightTreeNode instances
 * that will be used to manipulate them.  The FlyweightTreeNode instances will usually
 * be declared as `fwNodes` when confusion might arise.
 * If a variable or argument is not explicitly named `iNode` or a related name it is
 * FlyweightTreeNode instance.
 *
 * The developer should not be concerned about the iNodes,
 * except in the initial configuration tree.
 * If the developer finds anything that needs to be done through iNodes,
 * it is a bug and should be reported (thanks).
 * iNodes should be private.
 *
 * @class FlyweightTreeManager
 * @extends Widget
 * @constructor
 */

_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 87);
FWMgr = Y.Base.create(
    NAME,
    Y.Widget,
    [],
    {
        /**
         * Clone of the configuration tree.
         * The FlyweightTreeNode instances will use the iNodes (internal nodes) in this tree as the storage for their state.
         * @property _tree
         * @type Object
         * @private
         */
        _tree: null,
        /**
         * Pool of FlyweightTreeNode instances to use and reuse by the manager.
         * It contains a hash of arrays indexed by the iNode (internal node) type.
         * Each array contains a series of FlyweightTreeNode subclasses of the corresponding type.
         * @property _pool
         * @type {Object}
         * @private
         */
        _pool: null,
        /**
         * List of dom events to be listened for at the outer container and fired again
         * at the FlyweightTreeNode level once positioned over the source iNode.
         *
         * Since the node instances are not actually there, they can't listen to the events themselves
         * so the events listed here will serve to wake up those instances and get the event
         * as if they had been there all along.
         * @property _domEvents
         * @type Array of strings
         * @protected
         * @default null
         */
        _domEvents: null,
        /**
         * Reference to the element that has the focus or should have the focus
         * when this widget is active (ie, tabbed into).
         * Mostly used for WAI-ARIA support.
         * @property _focusedINode
         * @type FlyweightTreeNode
         * @private
         * @default null
         */
        _focusedINode: null,

        /**
         * Event handles of events subscribed to, to detach them on destroy
         * @property _eventHandles
         * @type Array of EventHandles
         * @private
         */
        _eventHandles: null,

        /**
         * Part of the Widget lifecycle.
         * @method initializer
         * @protected
         */
        initializer:function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "initializer", 146);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 147);
this._pool = {};
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 148);
this._eventHandles = [];
        },
        /**
         * Part of the lifecycle.  Destroys the pools.
         * @method destructor
         * @protected
         */
        destructor: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "destructor", 155);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 156);
var pool = this._pool;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 157);
Y.Object.each(pool, function (value, key) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 2)", 157);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 158);
YArray.each(value, function (fwNode) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 3)", 158);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 159);
fwNode.destroy();
                });
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 161);
delete pool[key];
            });
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 163);
this._pool = null;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 164);
YArray.each(this._eventHandles, function (evHandle) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 4)", 164);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 165);
evHandle.detach();
            });
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 167);
this._eventHandles = null;

        },
        /**
         * Method to load the configuration tree.
         * The nodes in this tree are copied into iNodes (internal nodes) for internal use.
         *
         * The initializer does not load the tree automatically so as to allow the subclass
         * of this manager
         * to process the tree definition anyway it wants, adding defaults and such
         * and to name the tree whatever is suitable.
         * For TreeView, the configuration property is named `tree`, for a form, it is named `form`.
         * It also sets initial values for some default properties such as `parent` references and `id` for all iNodes.
         * @method _loadConfig
         * @param tree {Array} Configuration for the first level of nodes.
         * Contains objects with the following attributes:
         * @param tree.label {String} Text or HTML markup to be shown in the node
         * @param [tree.expanded=true] {Boolean} Whether the children of this node should be visible.
         * @param [tree.children] {Array} Further definitions for the children of this node
         * @param [tree.type=FWTreeNode] {FWTreeNode | String} Class used to create instances for this iNode.
         * It can be a reference to an object or a name that can be resolved as `Y[name]`.
         * @param [tree.id=Y.guid()] {String} Identifier to assign to the DOM element containing the UI for this node.
         * @param [tree.template] {String} Template for this particular node.
         * @protected
         */
        _loadConfig: function (tree) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_loadConfig", 192);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 193);
this._tree = {
                children: Y.clone(tree)
            };
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 196);
this._initNodes(this._tree);

        },
        /** Initializes the iNodes configuration with default values and management info.
         * @method _initNodes
         * @param parentINode {Object} Parent of the iNodes to be set
         * @protected
         */
        _initNodes: function (parentINode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_initNodes", 204);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 205);
var self = this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 206);
YArray.each(parentINode.children, function (iNode, i) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 5)", 206);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 207);
if (Lang.isString(iNode)) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 208);
iNode = {label: iNode};
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 209);
parentINode.children[i] = iNode;
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 211);
if (!self._focusedINode) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 212);
self._focusedINode = iNode;
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 214);
iNode._parent = parentINode;
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 215);
iNode.id = iNode.id || Y.guid();

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 217);
self._initNodes(iNode);
            });
        },
        /**
         * Widget lifecyle method.
         *
         * Gets the HTML markup for the visible nodes and inserts it into the contentbox.
         * @method renderUI
         * @protected
         */
        renderUI: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "renderUI", 227);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 228);
var root = this.getRoot();
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 229);
root._renderChildren(this.get(CBX));
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 230);
root.release();
        },
        /**
         * Initializes the events for its internal use and those requested in
         * the {{#crossLink "_domEvents"}}{{/crossLink}} array.
         * @method bindUI
         * @protected
         */
        bindUI: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "bindUI", 238);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 239);
var self = this;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 241);
self._eventHandles.push(self.after('focus', self._afterFocus));
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 242);
if (self._domEvents) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 243);
YArray.each(self._domEvents, function (event) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 6)", 243);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 244);
self._eventHandles.push(self.after(event, self._afterDomEvent, self));
                });
            }
        },
        /**
         * Overrides the native `fire` method so that for DOM events,
         * it will fetch from the pool the fwNode that should have received
         * the event and add it to the event facade as property `node`.
         *
         * @method fire
         * @param type {String|Object} The type of the event, or an object that contains
         * a 'type' property.
         * @param arguments {Object*} an arbitrary set of parameters to pass to
         * the handler. If the first of these is an object literal and the event is
         * configured to emit an event facade, the event facade will replace that
         * parameter after the properties the object literal contains are copied to
         * the event facade.
         * @return {Boolean} false if the event was halted.
         */
        fire: function (type, ev) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "fire", 263);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 264);
var ret, self = this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 265);
if (ev && ev.domEvent) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 266);
ev.node = self._poolFetchFromEvent(ev);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 267);
ret = FWMgr.superclass.fire.call(self, type, ev);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 268);
if (ev.node) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 269);
self._poolReturn(ev.node);
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 271);
return ret;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 273);
return FWMgr.superclass.fire.apply(self, arguments);
        },
        /**
         * Expands all the nodes of the tree.
         *
         * It will only expand existing nodes.  If there is a {{#crossLink "dynamicLoader:attribute"}}{{/crossLink}} configured
         * it will not expand those since that might lead to extreme situations.
         * @method expandAll
         * @chainable
         */
        expandAll: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "expandAll", 283);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 284);
this.forSomeNodes(function(node) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 7)", 284);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 285);
node.set(EXPANDED, true);
            });
        },
        /**
         * Collapses all the nodes of the tree.
         *
         * @method collapseAll
         * @chainable
         */
        collapseAll: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "collapseAll", 294);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 295);
this.forSomeNodes(function(node) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 8)", 295);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 296);
node.set(EXPANDED, false);
            });
        },
        /**
         * Finds a node by attribute value or by condition.
         * If the first argument is a string, it must be the name of an attribute
         * and the second argument the value sought.
         * If the first argument is a function, it should return true on finding
         * the node sought. The function will receive a node reference.
         * It returns the node sought or null.
         * The node is on hold and it must be released once used.
         * @method getNodeBy
         * @param attr {String or Function} Either an attribute name or a matching function
         * @param value {Any} if the first argument is a string, the second is the value to match
         * @return {FWNode or null} The node found or null
         */
        getNodeBy: function (attr, value) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getNodeBy", 312);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 313);
var fn, found = null;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 314);
switch (Lang.type(attr)) {
                case 'function':
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 316);
fn = attr;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 317);
break;
                case 'string':
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 319);
fn = function (node) {
                        _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "fn", 319);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 320);
return node.get(attr) === value;
                    };
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 322);
break;
                default:
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 324);
return null;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 326);
this.forSomeNodes(function (node) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 9)", 326);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 327);
if (fn(node)) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 328);
found = node;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 329);
found.hold();
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 330);
return true;
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 332);
return false;
            });
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 334);
return found;
        },

        /** Generic event listener for DOM events listed in the {{#crossLink "_domEvents"}}{{/crossLink}} array.
         *  It will locate the iNode represented by the UI elements that received the event,
         *  slide a suitable instance on it and fire the same event on that node.
         *  @method _afterEvent
         *  @param ev {EventFacade} Event facade as produced by the event
         *  @private
         */
        _afterDomEvent: function(ev) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_afterDomEvent", 344);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 345);
var fwNode =  ev.node;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 346);
if (fwNode) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 347);
fwNode.fire(ev.type.split(':')[1], {domEvent:ev.domEvent});
            }
        },
        /**
         * Returns a string identifying the type of the object to handle the iNode
         * or null if type was not a FlyweightNode instance.
         * @method _getTypeString
         * @param iNode {Object} Internal node in the tree configuration
         * @return {String} type of iNode.
         * @private
         */
        _getTypeString: function (iNode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_getTypeString", 358);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 359);
var type = iNode.type;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 360);
if (!type) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 361);
return DEFAULT_POOL;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 363);
if (typeof type === 'string') {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 364);
if (!Y[type]) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 365);
throw new TypeError('Missing node class: Y.' + type );
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 367);
type = Y[type];
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 369);
type = type.NAME;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 370);
if (!type) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 371);
throw new TypeError("Node contains unknown type");
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 373);
return type;
        },
        /**
         * Pulls from the pool an instance of the type declared in the given iNode
         * and slides it over that iNode.
         * If there are no instances of the given type in the pool, a new one will be created via {{#crossLink "_createNode"}}{{/crossLink}}
         * If an instance is held (see: {{#crossLink "FlyweightTreeNode/hold"}}{{/crossLink}}), it will be returned instead.
         * @method _poolFetch
         * @param iNode {Object} reference to a iNode within the configuration tree
         * @return {FlyweightTreeNode} Usually a subclass of FlyweightTreeNode positioned over the given iNode
         * @protected
         */
        _poolFetch: function(iNode) {

            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_poolFetch", 385);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 387);
var pool,
                fwNode = iNode._nodeInstance,
                type = this._getTypeString(iNode);

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 391);
if (!fwNode) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 392);
pool = this._pool[type];
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 393);
if (pool === undefined) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 394);
pool = this._pool[type] = [];
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 396);
if (pool.length) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 397);
fwNode = pool.pop();
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 398);
fwNode._slideTo(iNode);
                } else {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 400);
fwNode = this._createNode(iNode);
                }
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 403);
iNode._refCount = (iNode._refCount || 0) + 1;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 404);
return fwNode;
        },
        /**
         * Returns the FlyweightTreeNode instance to the pool.
         * Instances held (see: {{#crossLink "FlyweightTreeNode/hold"}}{{/crossLink}}) are never returned.
         * @method _poolReturn
         * @param fwNode {FlyweightTreeNode} Instance to return.
         * @protected
         */
        _poolReturn: function (fwNode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_poolReturn", 413);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 414);
var pool,
                iNode = fwNode._iNode,
                type = this._getTypeString(iNode);

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 418);
iNode._refCount -= 1 ;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 419);
if (iNode._refCount) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 420);
return;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 422);
fwNode._iNode = null;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 423);
iNode._nodeInstance = null;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 424);
pool = this._pool[type];
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 425);
if (pool) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 426);
pool.push(fwNode);
            }
        },
        /**
         * Returns a new instance of the type given in iNode or the
         * {{#crossLink "defaultType"}}{{/crossLink}} if none specified
         * and slides it on top of the iNode provided.
         * @method _createNode
         * @param iNode {Object} reference to a iNode within the configuration tree
         * @return {FlyweightTreeNode} Instance of the corresponding subclass of FlyweightTreeNode
         * @protected
         */
        _createNode: function (iNode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_createNode", 438);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 439);
var newNode,
                Type = iNode.type || this.get('defaultType');
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 441);
if (Lang.isString(Type)) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 442);
Type = Y[Type];
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 444);
if (Type) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 445);
newNode = new Type({root:this});
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 446);
if (newNode instanceof Y.FlyweightTreeNode) {
                    // I need to do this otherwise Attribute will initialize
                    // the real iNode with default values when activating a lazyAdd attribute.
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 449);
newNode._slideTo({});
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 450);
YArray.each(Y.Object.keys(newNode._state.data), newNode._addLazyAttr, newNode);
                    // newNode.getAttrs();
                    // That's it (see above)
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 453);
newNode._root =  this;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 454);
newNode._slideTo(iNode);
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 455);
return newNode;
                }
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 458);
return null;
        },
        /**
         * Returns an instance of Flyweight node positioned over the root.
         * The reference is placed on hold and should be released once used.
         * @method getRoot
         * @return {FlyweightTreeNode}
         */
        getRoot: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getRoot", 466);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 467);
return this._poolFetch(this._tree).hold();
        },
        /**
         * Locates a iNode in the tree by the element that represents it.
         * @method _findINodeByElement
         * @param el {Node} Any element belonging to the tree
         * @return {Object} iNode that produced the markup for that element or null if not found
         * @protected
         */
        _findINodeByElement: function(el) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_findINodeByElement", 476);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 477);
var id,
                found = null,
                scan = function (iNode) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "scan", 479);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 480);
if (iNode.id === id) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 481);
found = iNode;
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 482);
return true;
                    }
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 484);
if (iNode.children) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 485);
return YArray.some(iNode.children, scan);
                    }
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 487);
return false;
                };
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 489);
el = el.ancestor(DOT + FWNode.CNAMES.CNAME_NODE, true);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 490);
if (el) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 491);
id = el.get('id');

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 493);
if (scan(this._tree)) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 494);
return found;
                }
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 497);
return null;
        },
        /**
         * Returns a FlyweightTreeNode instance from the pool, positioned over the iNode whose markup generated some event.
         * @method _poolFetchFromEvent
         * @param ev {EventFacade}
         * @return {FlyweightTreeNode} The FlyweightTreeNode instance or null if not found.
         * @private
         */
        _poolFetchFromEvent: function (ev) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_poolFetchFromEvent", 506);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 507);
var found = this._findINodeByElement(ev.domEvent.target);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 508);
if (found) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 509);
return this._poolFetch(found);
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 511);
return null;
        },
        /**
         * Traverses the whole configuration tree, calling a given function for each iNode.
         * If the function returns true, the traversing will terminate.
         * @method _forSomeINode
         * @param fn {Function} Function to call on each configuration iNode
         *        @param fn.iNode {Object} iNode in the configuration tree
         *        @param fn.depth {Integer} depth of this iNode within the tree
         *        @param fn.index {Integer} index of this iNode within the array of its siblings
         * @param scope {Object} scope to run the function in, defaults to `this`.
         * @return true if any of the function calls returned true (the traversal was terminated earlier)
         * @protected
         */
        _forSomeINode: function(fn, scope) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_forSomeINode", 525);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 526);
scope = scope || this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 527);
var loop = function(iNode, depth) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "loop", 527);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 528);
return YArray.some(iNode.children || [], function(childINode, index) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 10)", 528);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 529);
if (fn.call(scope, childINode,depth, index)) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 530);
return true;
                    }
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 532);
return loop(childINode,depth + 1);
                });
            };
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 535);
return loop(this._tree, 0);
        },
        /**
         * Executes the given function over all the nodes in the tree or until the function returns true.
         * If dynamic loading is enabled, it will not run over nodes not yet loaded.
         * @method forSomeNodes
         * @param fn {function} function to execute on each node.  It will receive:
         *    @param fn.node {FlyweightTreeNode} node being visited.
         *    @param fn.depth {Integer} depth from the root. The root node is level zero and it is not traversed.
         *    @param fn.index {Integer} position of this node within its branch
         * @param scope {Object} Scope to run the function in.  Defaults to the FlyweightTreeManager instance.
         * @return {Boolean} true if any function calls returned true (the traversal was interrupted)
         */
        forSomeNodes: function (fn, scope) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "forSomeNodes", 548);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 549);
scope = scope || this;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 551);
var root = this.getRoot(),
                forOneLevel = function (fwNode, depth) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "forOneLevel", 552);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 553);
fwNode.forSomeChildren(function (fwNode, index, array) {
                        _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 11)", 553);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 554);
if (fn.call(scope, fwNode, depth, index, array) === true) {
                            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 555);
return true;
                        }
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 557);
return forOneLevel(fwNode, depth + 1);
                    });
                },
                ret = forOneLevel(root, 0);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 561);
root.release();
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 562);
return ret;
        },
        /**
         * Getter for the {{#crossLink "focusedNode:attribute"}}{{/crossLink}} attribute
         * @method _focusedNodeGetter
         * @return {FlyweightNode} Node that would have the focus if the widget is focused
         * @private
         */
        _focusedNodeGetter: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_focusedNodeGetter", 570);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 571);
return this._poolFetch(this._focusedINode).hold();
        },
        /**
         * Setter for the {{#crossLink "focusedNode:attribute"}}{{/crossLink}} attribute
         * @method _focusedNodeSetter
         * @param value {FlyweightNode} Node to receive the focus.
         * @return {Object} iNode matching the focused node.
         * @private
         */
        _focusedNodeSetter: function (value) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_focusedNodeSetter", 580);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 581);
if (!value || value instanceof Y.FlyweightTreeNode) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 582);
var newINode = (value?value._iNode:this._tree.children[0]);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 583);
this._focusOnINode(newINode);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 584);
return newINode;
            } else {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 586);
return Y.Attribute.INVALID_VALUE;
            }
        },
        /**
         * Sets the focus on the given iNode
         * @method _focusOnINode
         * @param iNode {Object} iNode to receive the focus
         * @private
         */
        _focusOnINode: function (iNode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_focusOnINode", 595);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 596);
var prevINode = this._focusedINode,
                el,
                self = this,
                expand = function (iNode) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "expand", 599);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 600);
iNode = iNode._parent;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 601);
if (iNode && iNode._parent) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 602);
expand(iNode);
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 603);
self._poolReturn(self._poolFetch(iNode).set(EXPANDED, true));
                    }
                };

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 607);
if (iNode && iNode !== prevINode) {

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 609);
el = Y.one(HASH + prevINode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 610);
el.blur();
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 611);
el.set(TABINDEX, -1);

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 613);
expand(iNode);

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 615);
el = Y.one(HASH + iNode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 616);
el.focus();
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 617);
el.set(TABINDEX,0);

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 619);
self._focusedINode = iNode;

            }

        },
        /**
         * Setter for the {{#crossLink "dynamicLoader:attribute"}}{{/crossLink}} attribute.
         * It changes the expanded attribute to false on childless iNodes not marked with `isLeaf
         * since they can now be expanded.
         * @method
         * @param value {Function | null } Function to handle the loading of nodes on demand
         * @return {Function | null | INVALID_VALUE} function set or rejection
         * @private
         */
        _dynamicLoaderSetter: function (value) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_dynamicLoaderSetter", 633);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 634);
if (!Lang.isFunction(value) &&  value !== null) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 635);
return Y.Attribute.INVALID_VALUE;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 637);
return value;
        }
    },
    {
        ATTRS: {
            /**
             * Default object type of the nodes if no explicit type is given in the configuration tree.
             * It can be specified as an object reference, these two are equivalent: `Y.FWTreeNode` or  `'FWTreeNode'`.
             *
             * @attribute defaultType
             * @type {String | Object}
             * @default 'FlyweightTreeNode'
             */
            defaultType: {
                value: 'FlyweightTreeNode'
            },
            /**
             * Function used to load the nodes dynamically.
             * Function will run in the scope of the FlyweightTreeManager instance and will
             * receive:
             *
             * * node {FlyweightTreeNode} reference to the parent of the children to be loaded.
             * * callback {Function} function to call with the configuration info for the children.
             *
             * The function shall fetch the nodes and create a configuration object
             * much like the one a whole tree might receive.
             * It is not limited to just one level of nodes, it might contain children elements as well.
             * When the data is processed, it should call the callback with the configuration object.
             * The function is responsible of handling any errors.
             * If the the callback is called with no arguments, the parent node will be marked as having no children.
             *
             * This attribute should be set before the tree is rendered as childless nodes
             * render differently when there is a dynamic loader than when there isn't.
             * (childless nodes can be expanded when a dynamic loader is present and the UI should reflect that).
             * @attribute dynamicLoader
             * @type {Function or null}
             * @default null
             */
            dynamicLoader: {
                value: null,
                setter: '_dynamicLoaderSetter'
            },
            /**
             * Points to the node that currently has the focus.
             * If read, the node returned is placed on hold.
             * Please make sure to release the node instance to the pool when done.
             * @attribute focusedNode
             * @type FlyweightTreeNode
             * @default First node in the tree
             */
            focusedNode: {
                getter: '_focusedNodeGetter',
                setter: '_focusedNodeSetter'
                // There is no need for validator since the setter already takes care of validation.
            }

        }
    });


_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 697);
Y.FlyweightTreeManager = FWMgr;


/**
* An implementation of the flyweight pattern.  This class should not be instantiated directly.
* Instances of this class can be requested from the flyweight manager class
*
* The FlyweightTreeManager will create instances of this class as required and
* pool them when not in use.
* The instances can be slid on top of the nodes (iNodes, for internal nodes)
* in literal object containing the definition
* of a tree and will take its state from the `iNode` it is slid upon.
* It relies for most of its functionality on the flyweight manager object,
* which contains most of the code.
* @class FlyweightTreeNode
* @extends Base
* @constructor  Do not instantiate directly.
*/
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 715);
FWNode = Y.Base.create(
    FWNODE_NAME,
    Y.Base,
    [],
    {
        /**
         * Reference to the iNode in the configuration tree it has been slid over.
         * @property _iNode
         * @type {Object}
         * @private
         **/
        _iNode:null,
        /**
         * Reference to the FlyweightTreeManager instance this node belongs to.
         * It is set by the root and should be considered read-only.
         * @property _root
         * @type FlyweightTreeManager
         * @private
         */
        _root: null,
        /**
         * Standard lifecycle method, reads the root node from the config
         * @method initializer
         * @param cfg {object} configuration data
         * @protected
         */
        initializer: function (cfg) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "initializer", 741);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 742);
this._root = cfg.root;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 743);
this.after('expandedChange', this._afterExpandedChange);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 744);
this.after('labelChange', this._afterLabelChange);
            // This is a patch because the _buildCfg does not work
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 746);
this._buildCfgPatch();
        },
        /**
         * Patch to work around the issue with the static _buildCfg property of Base
         * that doesn't quite work.
         * @method _buildCfgPatch
         * @private
         */
        _buildCfgPatch: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_buildCfgPatch", 754);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 755);
var cnames = {}, it, ot, constr = this.constructor;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 756);
YArray.each(this._classes, function (c) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 12)", 756);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 757);
Y.mix(cnames, c.CNAMES);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 758);
it = it || c.INNER_TEMPLATE;
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 759);
ot = ot || c.OUTER_TEMPLATE;
            });
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 761);
constr.CNAMES = cnames;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 762);
constr.INNER_TEMPLATE = it;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 763);
constr.OUTER_TEMPLATE = ot;
        },
        /**
         * Returns a string with the markup for this node along that of its children
         * produced from its attributes rendered
         * via the first template string it finds in these locations:
         *
         * * It's own {{#crossLink "template"}}{{/crossLink}} configuration attribute
         * * The static {{#crossLink "FlyweightTreeNode/TEMPLATE"}}{{/crossLink}} class property
         *
         * @method _getHTML
         * @param index {Integer} index of this node within the array of siblings
         * @param nSiblings {Integer} number of siblings including this node
         * @param depth {Integer} number of levels to the root
         * @return {String} markup generated by this node
         * @protected
         */
        _getHTML: function(index, nSiblings, depth) {
            // assumes that if you asked for the HTML it is because you are rendering it
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_getHTML", 780);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 782);
var root = this._root,
                iNode = this._iNode,
                attrs = this.getAttrs(),
                s = '',
                childCount = iNode.children && iNode.children.length,
                CNAMES = this.constructor.CNAMES,
                nodeClasses = [CNAMES.CNAME_NODE],
                templ,
                it = iNode.inner_template || this.constructor.INNER_TEMPLATE,
                ot = iNode.outer_template || this.constructor.OUTER_TEMPLATE;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 793);
templ = ot.replace('{INNER_TEMPLATE}', it);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 794);
Y.mix(attrs, CNAMES);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 795);
iNode._rendered = true;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 796);
if (childCount) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 797);
if (attrs[EXPANDED]) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 798);
iNode._childrenRendered = true;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 799);
this.forSomeChildren( function (fwNode, index, array) {
                        _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 13)", 799);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 800);
s += fwNode._getHTML(index, array.length, depth + 1);
                    });
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 802);
nodeClasses.push(CNAMES.CNAME_EXPANDED);
                } else {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 804);
nodeClasses.push(CNAMES.CNAME_COLLAPSED);
                }
            } else {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 807);
if (this._root.get(DYNAMIC_LOADER) && !iNode.isLeaf) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 808);
nodeClasses.push(CNAMES.CNAME_COLLAPSED);
                } else {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 810);
nodeClasses.push(CNAMES.CNAME_NOCHILDREN);
                }
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 813);
if (index === 0) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 814);
nodeClasses.push(CNAMES.CNAME_FIRSTCHILD);
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 816);
if (index === nSiblings - 1) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 817);
nodeClasses.push(CNAMES.CNAME_LASTCHILD);
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 819);
if (iNode.type) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 820);
nodeClasses.push(CNAMES.CNAME_TYPE_PREFIX + root._getTypeString(iNode));
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 822);
attrs.children = s;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 823);
attrs.CNAME_NODE = nodeClasses.join(' ');
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 824);
attrs.tabIndex = (iNode === root._focusedINode)?0:-1;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 826);
return Lang.sub(templ, attrs);

        },
        /**
         * Method to slide this instance on top of another iNode in the configuration object
         * @method _slideTo
         * @param iNode {Object} iNode in the underlying configuration tree to slide this object on top of.
         * @private
         */
        _slideTo: function (iNode) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_slideTo", 835);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 836);
iNode._nodeInstance = this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 837);
this._iNode = iNode;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 838);
this._stateProxy = iNode;
        },
        /**
         * Whether this node has children.
         * If there are children, it actually returns the number of children,
         * otherwise it might return 0 or undefined.
         * @method hasChildren
         * @return {Boolean} true if the node has children
         */
        hasChildren: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "hasChildren", 847);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 848);
var children = this._iNode.children;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 849);
return !!(children && children.length);
        },
        /**
         * Executes the given function on each of the child nodes of this node.
         * @method forSomeChildren
         * @param fn {Function} Function to be executed on each node
         *        @param fn.child {FlyweightTreeNode} Instance of a suitable subclass of FlyweightTreeNode,
         *        positioned on top of the child node
         *        @param fn.index {Integer} Index of this child within the array of children
         * @param scope {object} The falue of this for the function.  Defaults to the parent.
        **/
        forSomeChildren: function(fn, scope) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "forSomeChildren", 860);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 861);
var root = this._root,
                children = this._iNode.children,
                child, ret;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 864);
scope = scope || this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 865);
if (children && children.length) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 866);
YArray.some(children, function (iNode, index, array) {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 14)", 866);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 867);
child = root._poolFetch(iNode);
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 868);
ret = fn.call(scope, child, index, array);
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 869);
root._poolReturn(child);
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 870);
return ret;
                });
            }
        },
        /**
         * Responds to the change in the {{#crossLink "label:attribute"}}{{/crossLink}} attribute.
         * @method _afterLabelChange
         * @param ev {EventFacade} standard attribute change event facade
         * @private
         */
        _afterLabelChange: function (ev) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_afterLabelChange", 880);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 881);
var el = Y.one(HASH + this._iNode.id + ' .' + FWNode.CNAMES.CNAME_CONTENT);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 882);
if (el) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 883);
el.setHTML(ev.newVal);
            }
        },
        /**
         * Getter for the expanded configuration attribute.
         * It is meant to be overriden by the developer.
         * The supplied version defaults to true if the expanded property
         * is not set in the underlying configuration tree.
         * It can be overriden to default to false.
         * @method _expandedGetter
         * @return {Boolean} The expanded state of the node.
         * @protected
         */
        _expandedGetter: function (value) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_expandedGetter", 896);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 897);
var iNode = this._iNode;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 898);
if (!!this._root.get(DYNAMIC_LOADER) && !iNode.children) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 899);
return !!iNode.isLeaf;
            } else {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 901);
return (value === undefined) || !!value;
            }
        },
        /**
         * Responds to the change in the {{#crossLink "expanded:attribute"}}{{/crossLink}} attribute.
         * It renders the child nodes if this branch has never been expanded.
         * Then sets the className on the node to the static constants
         * CNAME\_COLLAPSED or CNAME\_EXPANDED from Y.FlyweightTreeManager
         * @method _afterExpandedChange
         * @param ev {EventFacade} standard attribute change event facade
         * @private
         */
        _afterExpandedChange: function (ev) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_afterExpandedChange", 913);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 914);
var value = !!ev.newVal,
                self = this,
                iNode = self._iNode,
                root = self._root,
                el = Y.one(HASH + iNode.id),
                dynLoader = root.get(DYNAMIC_LOADER),
                CEXP = FWNode.CNAMES.CNAME_EXPANDED,
                CCOLL = FWNode.CNAMES.CNAME_COLLAPSED;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 923);
if (dynLoader && !iNode.isLeaf && (!iNode.children  || !iNode.children.length)) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 924);
this._loadDynamic();
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 925);
return;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 927);
if (el) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 928);
if (iNode.children && iNode.children.length) {
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 929);
if (value) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 930);
if (!iNode._childrenRendered) {
                            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 931);
self._renderChildren();
                        }
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 933);
el.replaceClass(CCOLL, CEXP);
                    } else {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 935);
el.replaceClass(CEXP, CCOLL);
                    }
                }
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 938);
el.set('aria-expanded', String(value));
            }
        },
        /**
         * Triggers the dynamic loading of children for this node.
         * @method _loadDynamic
         * @private
         */
        _loadDynamic: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_loadDynamic", 946);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 947);
var self = this,
                root = self._root;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 949);
Y.one(HASH + this.get('id')).replaceClass(FWNode.CNAMES.CNAME_COLLAPSED, FWNode.CNAMES.CNAME_LOADING);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 950);
root.get(DYNAMIC_LOADER).call(root, self, Y.bind(self._dynamicLoadReturn, self));

        },
        /**
         * Callback for the dynamicLoader method.
         * @method _dynamicLoadReturn
         * @param response {Array} array of child iNodes
         * @private
         */
        _dynamicLoadReturn: function (response) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_dynamicLoadReturn", 959);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 960);
var self = this,
                iNode = self._iNode,
                root = self._root,
                CNAMES = FWNode.CNAMES;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 965);
if (response) {

                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 967);
iNode.children = response;
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 968);
root._initNodes(iNode);
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 969);
self._renderChildren();
            } else {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 971);
iNode.isLeaf = true;
            }
            // isLeaf might have been set in the response, not just in the line above.
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 974);
Y.one(HASH + iNode.id).replaceClass(CNAMES.CNAME_LOADING, (iNode.isLeaf?CNAMES.CNAME_NOCHILDREN:CNAMES.CNAME_EXPANDED));
        },
        /**
         * Renders the children of this node.
         * It the children had been rendered, they will be replaced.
         * @method _renderChildren
         * @param el {Node} Container to render the children into.
         * Used only for rendering of the root when it will be the contentBox.
         * @private
         */
        _renderChildren: function (el) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_renderChildren", 984);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 985);
var s = '',
                iNode = this._iNode,
                depth = this.get('depth');
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 988);
iNode._childrenRendered = true;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 989);
this.forSomeChildren(function (fwNode, index, array) {
                _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "(anonymous 15)", 989);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 990);
s += fwNode._getHTML(index, array.length, depth + 1);
            });
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 992);
el = el || Y.one(HASH + iNode.id + ' .' + FWNode.CNAMES.CNAME_CHILDREN);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 993);
el.setHTML(s);
        },
        /**
         * Prevents this instance from being returned to the pool and reused.
         * Remember to {{#crossLink "release"}}{{/crossLink}} this instance when no longer needed.
         * @method hold
         * @chainable
         */
        hold: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "hold", 1001);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1002);
var self = this,
                iNode = self._iNode;

            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1005);
iNode._refCount += 1;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1006);
return self;
        },
        /**
         * Allows this instance to be returned to the pool and reused.
         *
         * __Important__: This instance should not be used after being released
         * @method release
         * @chainable
         */
        release: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "release", 1015);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1016);
var self = this;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1017);
self._root._poolReturn(self);
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1018);
return self;
        },
        /**
         * Returns the parent node for this node or null if none exists.
         * The copy is on {{#crossLink "hold"}}{{/crossLink}}.
         * Remember to {{#crossLink "release"}}{{/crossLink}} the copy to the pool when done.
         * @method getParent
         * @return FlyweightTreeNode
         */
        getParent: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getParent", 1027);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1028);
var iNode = this._iNode._parent;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1029);
return (iNode?this._root._poolFetch(iNode).hold():null);
        },
        /**
         * Returns the next sibling node for this node or null if none exists.
         * The copy is on {{#crossLink "hold"}}{{/crossLink}}.
         * Remember to {{#crossLink "release"}}{{/crossLink}} the copy to the pool when done.
         * @method getNextSibling
         * @return FlyweightTreeNode
         */
        getNextSibling: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getNextSibling", 1038);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1039);
var parent = this._iNode._parent,
                siblings = (parent && parent.children),
                index = siblings.indexOf(this._iNode) + 1;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1042);
if (index === 0 || index >= siblings.length) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1043);
return null;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1045);
return this._root._poolFetch(siblings[index]).hold();
        },
        /**
         * Returns the previous sibling node for this node or null if none exists.
         * The copy is on {{#crossLink "hold"}}{{/crossLink}}.
         * Remember to {{#crossLink "release"}}{{/crossLink}} the copy to the pool when done.
         * @method getPreviousSibling
         * @return FlyweightTreeNode
         */
        getPreviousSibling: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getPreviousSibling", 1054);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1055);
var parent = this._iNode._parent,
                siblings = (parent && parent.children),
                index = siblings.indexOf(this._iNode) - 1;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1058);
if (index < 0) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1059);
return null;
            }
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1061);
return this._root._poolFetch(siblings[index]).hold();
        },
        /**
         * Sets the focus to this node.
         * @method focus
         * @chainable
         */
        focus: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "focus", 1068);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1069);
return this._root.set(FOCUSED, this);
        },
        /**
         * Removes the focus from this node
         * @method blur
         * @chainable
         */
        blur: function () {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "blur", 1076);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1077);
return this._root.set(FOCUSED, null);
        },
        /**
         * Sugar method to toggle the expanded state of the node.
         * @method toggle
         * @chainable
         */
        toggle: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "toggle", 1084);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1085);
return this.set(EXPANDED, !this.get(EXPANDED));
        },
        /**
         * Sugar method to expand a node
         * @method expand
         * @chainable
         */
        expand: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "expand", 1092);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1093);
return this.set(EXPANDED, true);
        },
        /**
         * Sugar method to collapse this node
         * @method collapse
         * @chainable
         */
        collapse: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "collapse", 1100);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1101);
return this.set(EXPANDED, false);
        },
        /**
         * Returns true if this node is the root node
         * @method isRoot
         * @return {Boolean} true if root node
         */
        isRoot: function() {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "isRoot", 1108);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1109);
return this._root._tree === this._iNode;
        },

        /**
        * Sets the stored value for the attribute, in either the
        * internal state object, or the state proxy if it exits
        *
        * @method _setStateVal
        * @private
        * @param {String} name The name of the attribute
        * @param {Any} value The value of the attribute
        */
        _setStateVal : function(name, value) {
            _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "_setStateVal", 1121);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1122);
var iNode = this._iNode;
            _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1123);
if (this._state.get(name, BYPASS_PROXY) || this._state.get(name, 'initializing') || !iNode) {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1124);
this._state.add(name, VALUE, value);
            } else {
                _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1126);
iNode[name] = value;
            }
        }
    },
    {
        /**
         * Outer template string to be used to render this node.
         * It may be overriden by the subclass.
         *
         * It contains the HTML markup for the wrapper for the node plus placeholders,
         * enclosed in curly braces, that have access to any of the
         * configuration attributes of this node plus several predefined placeholders.
         *
         * It must contain at least three elements identified by their CSS classNames
         * and a special placeholder:

         +----------------------------+
         | {CNAME_NODE}               |
         | +------------------------+ |
         | | {INNER_TEMPLATE}        | |
         | +------------------------+ |
         |                            |
         | +------------------------+ |
         | | {CNAME_CHILDREN}       | |
         | +------------------------+ |
         +----------------------------+

         * For example:

        OUTER_TEMPLATE:'<div id="{id}" class="{CNAME_NODE}" role="" aria-expanded="{expanded}">{INNER_TEMPLATE}' +
                            '<div class="{CNAME_CHILDREN}" role="group">{children}</div></div>',

         * The outermost container identified by the className `{CNAME_NODE}`
         * must also use the `{id}` placeholder to set the `id` of the node.
         * It should also have the proper ARIA role assigned and the
         * `aria-expanded` set to the `{expanded}` placeholder.
         *
         * It must contain two further elements:
         *
         * * A placeholder for the INNER_TEMPLATE of this node, identified by the placeholder
         *   `{INNER_TEMPLATE}` which should contain everything the user would associate
         *   with this node, such as the label and other status indicators
         *   such as toggle and selection indicators.
         *
         * * The other element is the container for the children of this node.
         *   It will be identified by the className `{CNAME_CHILDREN}` and it
         *   should enclose the placeholder `{children}`.
         *
         * @property OUTER_TEMPLATE
         * @type {String}
         * @default '<div id="{id}" class="{CNAME_NODE}" role="" aria-expanded="{expanded}"><div tabIndex="{tabIndex}"
         class="{CNAME_CONTENT}">{label}</div><div class="{CNAME_CHILDREN}" role="group">{children}</div></div>'
         * @static
         */
        OUTER_TEMPLATE:'<div id="{id}" class="{CNAME_NODE}" role="" aria-expanded="{expanded}">{INNER_TEMPLATE}' +
                            '<div class="{CNAME_CHILDREN}" role="group">{children}</div></div>',
        /**
         * The template for what the user will see of the node.
         * It has been broken appart from the outer template because
         * this is the part that the developer is most likely to modify
         * so that there is no need to repeat the outer envelope over and over again.
         * For example:
         *
            INNER_TEMPLATE:'<div tabIndex="{tabIndex}" class="{CNAME_CONTENT}">{label}</div>',

         * This element must have at least a palceholder for the `{label}` attribute
         * and any other visual clues to the user.  It must also have the CSS className
         * `{CNAME_CONTENT}` which will be replaced by a suitable name at execution
         * and that will help to locate the contents of this node.
         *
         * This is the element that would receive the focus of the node, thus,
         * it must have a `{tabIndex}` placeholder to receive the appropriate
         * value for the `tabIndex` attribute.
         * @property INNER_TEMPLATE
         * @type {String}
         * @default '<div tabIndex="{tabIndex}" class="{CNAME_CONTENT}">{label}</div>'
         * @static
         */
        INNER_TEMPLATE:'<div tabIndex="{tabIndex}" class="{CNAME_CONTENT}">{label}</div>',
        /**
         * Collection of CSS class names used in the template.
         * It is written all uppercase because its contents are meant to be constants,
         * this object itself being augmented by class names added by its subclasses
         * @attribute CNAMES
         * @type Object
         * @static
         */
        CNAMES: {
            CNAME_NODE: getCName(FWNODE_NAME),
            CNAME_CONTENT: cName('content'),
            CNAME_CHILDREN: cName('children'),
            CNAME_COLLAPSED: cName('collapsed'),
            CNAME_EXPANDED: cName(EXPANDED),
            CNAME_NOCHILDREN: cName('no-children'),
            CNAME_FIRSTCHILD: cName('first-child'),
            CNAME_LASTCHILD: cName('last-child'),
            CNAME_LOADING: cName('loading'),
            CNAME_TYPE_PREFIX: cName('type-')
/*        },
        _buildCfg: {
            // aggregates: ['CNAMES']

 */       },
        ATTRS: {
            /**
             * Reference to the FlyweightTreeManager this node belongs to
             * @attribute root
             * @type {FlyweightTreeManager}
             * @readOnly
             *
             */

            root: {
                _bypassProxy: true,
                readOnly: true,
                getter: function() {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getter", 1241);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1242);
return this._root;
                }
            },

            /**
             * Template to use on this particular instance.
             * The renderer will default to the static TEMPLATE property of this class
             * (the preferred way) or the nodeTemplate configuration attribute of the root.
             * See the TEMPLATE static property.
             * @attribute template
             * @type {String}
             * @default undefined
             */
            template: {
                validator: Lang.isString
            },
            /**
             * Label for this node. Nodes usually have some textual content, this is the place for it.
             * @attribute label
             * @type {String}
             * @default ''
             */
            label: {
                setter:String,
                value: ''
            },
            /**
             * Id to assign to the DOM element that contains this node.
             * Once rendered, it cannot be changed.
             * If none was supplied, it will generate one.
             * @attribute id
             * @type {Identifier}
             * @default guid()
             */
            id: {
                validator: function () {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "validator", 1277);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1278);
return !this._root.get('rendered');
                }
            },
            /**
             * Returns the depth of this node from the root.
             * This is calculated on-the-fly.
             * @attribute depth
             * @type Integer
             * @readOnly
             */
            depth: {
                _bypassProxy: true,
                readOnly: true,
                getter: function () {
                    _yuitest_coverfunc("build/gallery-flyweight-tree/gallery-flyweight-tree.js", "getter", 1291);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1292);
var count = 0,
                        iNode = this._iNode;
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1294);
while (iNode._parent) {
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1295);
count += 1;
                        _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1296);
iNode = iNode._parent;
                    }
                    _yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1298);
return count-1;
                }
            },
            /**
             * Expanded state of this node.
             * @attribute expanded
             * @type Boolean
             * @default true
             */
            expanded: {
                getter: '_expandedGetter'
            }
        }
    }
);
_yuitest_coverline("build/gallery-flyweight-tree/gallery-flyweight-tree.js", 1313);
Y.FlyweightTreeNode = FWNode;



}, '@VERSION@', {"requires": ["widget", "base-build"], "skinnable": false});
